import net.ltgt.gradle.errorprone.CheckSeverity

buildscript {
  dependencies {
    classpath libs.androidPlugin
    classpath libs.kotlin.gradlePlugin
    classpath libs.kotlin.serializationPlugin
    classpath libs.dokkaPlugin
    classpath libs.gradleMavenPublishPlugin
    classpath libs.spotlessPlugin
    classpath libs.errorpronePlugin
    classpath libs.animalSnifferPlugin
    classpath libs.protobufPlugin
  }
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }
}

plugins {
  id('maven-publish')
}

project("retrofit"){
  apply plugin: 'maven-publish'

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/rogeert/retrofit")
        credentials {
          username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
          password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
      }
    }
  }
}

project("retrofit-converters:jackson"){
  apply plugin: 'maven-publish'

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/rogeert/retrofit")
        credentials {
          username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
          password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
      }
    }
  }
}


subprojects {
  tasks.withType(JavaCompile).configureEach { task ->
    task.options.encoding = 'UTF-8'
  }

  plugins.withType(JavaBasePlugin).configureEach {
    java.toolchain {
      languageVersion.set(JavaLanguageVersion.of(8))
    }
  }

  tasks.withType(Test).configureEach {
    testLogging {
      if (System.getenv("CI") == "true") {
        events = ["failed", "skipped", "passed"]
      }
      exceptionFormat "full"
    }
  }

  apply plugin: 'net.ltgt.errorprone'

  dependencies {
    errorproneJavac libs.errorproneJavac
    errorprone libs.errorproneCore
  }

  tasks.withType(JavaCompile).configureEach { task ->
    task.options.errorprone {
      excludedPaths = '.*/build/generated/source/proto/.*'
      check('MissingFail', CheckSeverity.ERROR)
      check('MissingOverride', CheckSeverity.ERROR)
      check('UnusedException', CheckSeverity.ERROR)
      check('UnusedMethod', CheckSeverity.ERROR)
      check('UnusedNestedClass', CheckSeverity.ERROR)
      check('UnusedVariable', CheckSeverity.ERROR)
      check('WildcardImport', CheckSeverity.ERROR)
    }
  }

  plugins.withId('java-library') {
    project.apply plugin: 'ru.vyarus.animalsniffer'
    animalsniffer {
      sourceSets = [sourceSets.main] // Only check main sources, ignore test code.
    }
    dependencies {
      signature 'org.codehaus.mojo.signature:java18:1.0@signature'

      if (project.path != ':retrofit-converters:java8' &&
        project.path != ':retrofit-converters:jaxb' &&
        project.path != ':retrofit-converters:jaxb3' &&
        project.path != ':retrofit-adapters:java8') {
        signature 'net.sf.androidscents.signature:android-api-level-21:5.0.1_r2@signature'
      }
    }

    plugins.apply('com.diffplug.spotless')
    spotless {
      java {
        googleJavaFormat(libs.googleJavaFormat.get().version)
          .formatJavadoc(false)
        removeUnusedImports()
        target 'src/*/java*/**/*.java'
      }
      kotlin {
        ktlint(libs.ktlint.get().version)
          .editorConfigOverride([
            // Making something an expression body should be a choice around readability.
            'ktlint_standard_function-expression-body': 'disabled',
          ])
        target 'src/**/*.kt'
      }
    }
  }
}

tasks.create('clean', Delete) {
  delete = layout.buildDirectory
}
